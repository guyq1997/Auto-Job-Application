---
globs: docker_batch_manager.py
alwaysApply: false
---

# Docker批量管理器 (docker_batch_manager.py)

## 🎯 主要作用

### 1. 系统总指挥
这是整个Docker并行处理系统的**核心控制器**，负责协调和管理所有Docker容器的并行执行。

### 2. 在整个流程中的位置
```
用户 → run_docker_batch.sh → docker_batch_manager.py → 多个Docker容器 → docker_runner.py
                                      ↑                          ↓
                               (总指挥官)                    (容器内工人)
                                      ↑                          ↓
                              收集汇总结果 ← ← ← ← ← ← ← ← 保存单个结果
```

## 🔧 核心功能解析

### DockerBatchManager类 (第18-278行)

**1. 初始化和准备 (第21-70行)**
- 设置并行容器数量和后端类型
- 自动检查和构建Docker镜像
- 创建结果目录

**2. 任务分配 (第72-86行)**
- `split_jobs_into_batches()`: 智能分割职位列表
- 根据容器数量自动计算批次大小
- 确保任务均匀分配

**3. 容器管理 (第88-154行)**
- `run_container()`: 启动单个Docker容器
- 创建临时文件传递职位数据
- 设置环境变量和挂载目录
- 监控容器执行和超时处理

**4. 并行执行 (第156-201行)**
- `run_batch_parallel()`: 使用线程池并行运行容器
- 同时启动多个容器
- 实时收集容器执行结果

**5. 结果汇总 (第203-278行)**
- `collect_results()`: 收集所有容器的结果文件
- 生成统一的汇总报告
- 计算成功率和执行统计

## 🔄 详细工作流程

### 阶段1: 准备阶段
```
检查Docker镜像 → 分割职位列表 → 准备环境变量
```

### 阶段2: 执行阶段
```
启动容器1: [职位1-2] ┐
启动容器2: [职位3-4] ├─ 并行执行
启动容器3: [职位5-6] ┤
启动容器4: [职位7-8] ┤
启动容器5: [职位9-10]┘
```

### 阶段3: 收集阶段
```
容器1结果 ┐
容器2结果 ├─ 汇总统计 → 生成最终报告
容器3结果 ┤
容器4结果 ┤
容器5结果 ┘
```

## 📊 关键特性

### 并行处理能力
- **线程池管理**: 使用`concurrent.futures.ThreadPoolExecutor`
- **容器隔离**: 每个容器独立运行，互不干扰
- **资源控制**: 可配置最大并行容器数量

### 错误处理和监控
- **超时控制**: 30分钟容器超时保护
- **异常捕获**: 完整的错误信息记录
- **实时监控**: 容器状态和执行进度追踪

### 结果管理
- **文件组织**: 自动创建和管理结果目录
- **数据汇总**: 统计成功率、执行时间等关键指标
- **报告生成**: 生成详细的JSON格式执行报告

## 🎮 使用示例

### 直接调用
```python
manager = DockerBatchManager(max_containers=5, backend="browser-use")
summary = await manager.run_batch_parallel(jobs_list)
```

### 命令行使用
```bash
python docker_batch_manager.py --jobs-file my_jobs.json --max-containers 3 --backend browser-use
```

## 🔗 与其他组件的关系

- **上游**: 被`run_docker_batch.sh`脚本调用
- **下游**: 管理多个`docker_runner.py`实例
- **依赖**: Docker引擎和镜像系统
- **输出**: 统一的结果文件和汇总报告
